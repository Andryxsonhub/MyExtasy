// src/pages/Dashboard.tsx

import React, { useState, ChangeEvent, useEffect } from 'react'; // Adicionado useEffect
import UserProfile from '../components/UserProfile';
import LikeButton from '../components/LikeButton'; // Importe o novo componente

// Dados de exemplo para o usuário
const MOCK_USER = {
  name: 'José Santos',
  email: 'jose.santos@swingclub.com',
  bio: 'Amante de dança e entusiasta de ritmos latinos. Explorando o mundo do swing!',
  profilePictureUrl: 'https://images.unsplash.com/photo-1519085360753-af0f10720015?q=80&w=1587&auto=format&fit=crop',
};

// Dados de exemplo com curtidas para simular arquivos já enviados
const DUMMY_UPLOADS = [
  { id: 1, type: 'image/jpeg', url: 'https://images.unsplash.com/photo-1542831371-29b0f74f9713?q=80&w=1470&auto=format&fit=crop', likes: 10 },
  { id: 2, type: 'image/jpeg', url: 'https://images.unsplash.com/photo-1550942540-f1c5c7d0130d?q=80&w=1587&auto=format&fit=crop', likes: 5 },
  { id: 3, type: 'video/mp4', url: 'https://www.w3schools.com/html/mov_bbb.mp4', likes: 2 },
];

const Dashboard = () => {
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [previews, setPreviews] = useState<string[]>([]);
  const [uploadedItems, setUploadedItems] = useState<{ id: number; type: string; url: string; likes: number }[]>(DUMMY_UPLOADS);

  // Limpa os URLs de objeto quando o componente é desmontado ou previews mudam
  useEffect(() => {
    return () => {
      previews.forEach(preview => URL.revokeObjectURL(preview));
    };
  }, [previews]);

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const filesArray = Array.from(event.target.files);
      setSelectedFiles(filesArray);

      // Revoga URLs antigos antes de criar novos
      previews.forEach(preview => URL.revokeObjectURL(preview));
      
      const previewsArray = filesArray.map(file => URL.createObjectURL(file));
      setPreviews(previewsArray);
    }
  };

  const handleUpload = () => {
    if (selectedFiles.length > 0) {
      const newItems = selectedFiles.map((file, index) => ({
        id: uploadedItems.length + index + 1,
        type: file.type,
        url: previews[index],
        likes: 0 // Inicia com 0 curtidas
      }));

      setUploadedItems(prevItems => [...prevItems, ...newItems]);
      
      setSelectedFiles([]);
      setPreviews([]); // Limpar as prévias após o upload

      alert('Upload de arquivos concluído com sucesso! (Simulação)');
    } else {
      alert('Por favor, selecione arquivos para fazer o upload.');
    }
  };

  const handleLike = (itemId: number) => {
    setUploadedItems(prevItems =>
      prevItems.map(item =>
        item.id === itemId ? { ...item, likes: item.likes + 1 } : item
      )
    );
  };

  const contentCount = uploadedItems.length;

  return (
    <div className="bg-gray-900 min-h-screen pt-24 text-white"> {/* Fundo escuro */}
      <div className="container mx-auto px-4 py-16">
        <div className="max-w-4xl mx-auto text-center mb-12">
          <h1 className="text-4xl font-extrabold text-white mb-4">Seu Painel</h1> {/* Texto branco */}
          <p className="text-lg text-gray-400">
            Gerencie suas fotos e vídeos, e compartilhe seus momentos.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Seção de Perfil de Usuário */}
          <div className="md:col-span-1">
            <UserProfile
              name={MOCK_USER.name}
              email={MOCK_USER.email}
              bio={MOCK_USER.bio}
              profilePictureUrl={MOCK_USER.profilePictureUrl}
            />
          </div>

          {/* Seção de Upload e Conteúdo */}
          <div className="md:col-span-2">
            {/* CARD DE UPLOAD */}
            <div className="bg-gray-800 border border-gray-700 rounded-lg shadow-lg p-8 mb-8 text-white"> {/* Tema escuro */}
              <h2 className="text-2xl font-semibold text-white mb-4">Upload de Arquivos</h2> {/* Texto branco */}
              
              <div className="mb-4">
                <label className="block mb-2 text-sm font-medium text-gray-300"> {/* Texto cinza claro */}
                  Selecione fotos ou vídeos
                </label>
                <input
                  type="file"
                  multiple
                  accept="image/*,video/*"
                  onChange={handleFileChange}
                  className="w-full text-sm text-gray-400
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-full file:border-0
                    file:text-sm file:font-semibold
                    file:bg-pink-600 file:text-white
                    hover:file:bg-pink-700" // Cor de botão primária
                />
              </div>

              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-6">
                {previews.map((preview, index) => (
                  <div key={index} className="relative rounded-lg overflow-hidden shadow-md aspect-square">
                    {selectedFiles[index].type.startsWith('image/') ? (
                      <img src={preview} alt="Prévia" className="w-full h-full object-cover" />
                    ) : (
                      <video src={preview} controls className="w-full h-full object-cover" />
                    )}
                  </div>
                ))}
              </div>

              <button
                onClick={handleUpload}
                className="w-full py-2 px-4 rounded-lg font-semibold bg-pink-600 text-white hover:bg-pink-700 transition-colors" // Cor de botão primária
              >
                Fazer Upload
              </button>
            </div>

            {/* CARD DE CONTEÚDO */}
            <div className="bg-gray-800 border border-gray-700 rounded-lg shadow-lg p-8 text-white"> {/* Tema escuro */}
              <h2 className="text-2xl font-semibold text-white mb-4"> {/* Texto branco */}
                Seu Conteúdo ({contentCount})
              </h2>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                {contentCount > 0 ? (
                  uploadedItems.map((item) => (
                    <div key={item.id} className="relative rounded-lg overflow-hidden shadow-md aspect-square">
                      {item.type.startsWith('image/') ? (
                        <img src={item.url} alt="Conteúdo" className="w-full h-full object-cover" />
                      ) : (
                        <video src={item.url} controls className="w-full h-full object-cover" />
                      )}
                      {/* Botão de curtir */}
                      <div className="absolute bottom-2 right-2">
                        <LikeButton
                          likes={item.likes}
                          onLike={() => handleLike(item.id)}
                        />
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 text-center col-span-full">
                    Nenhum conteúdo enviado ainda. Use o formulário acima para começar a compartilhar!
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;