// src/components/registration/RegistrationFlow.tsx

import React, { useState } from 'react';
import InterestStep from '@/components/registration/InterestStep';
import DesireStep from '@/components/registration/DesireStep';
import UsernameStep from '@/components/registration/UsernameStep';
import LocationStep from '@/components/registration/LocationStep';
import AuthStep from '@/components/registration/AuthStep';
import SuggestionStep from '@/components/registration/SuggestionStep';

// Definindo um tipo para todos os dados do formulário
export type FormData = {
  interests?: string[];
  desires?: string[];
  username?: string;
  location?: string;
  email?: string;
  password?: string;
  favoritedSuggestions?: number[];
};

const RegistrationFlow = () => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<FormData>({});

  // Função simplificada que atualiza os dados E avança para a próxima etapa
  const handleNext = (data: Partial<FormData>) => {
    const updatedData = { ...formData, ...data };
    setFormData(updatedData);
    setStep(prev => prev + 1);
    console.log(`Avançando da etapa ${step}. Dados guardados:`, updatedData);
  };
  
  const prevStep = () => setStep(prev => prev - 1);
  
  // Função final para concluir o registo
  const handleConclude = (finalData: Partial<FormData>) => {
    const finalFormData = { ...formData, ...finalData };
    setFormData(finalFormData);
    console.log("DADOS FINAIS DO CADASTRO:", finalFormData);
    alert("Cadastro concluído com sucesso! Redirecionando...");
    // Aqui você normalmente redirecionaria o usuário: navigate('/dashboard');
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return <InterestStep onNext={handleNext} />;
      case 2:
        return <DesireStep onNext={handleNext} onBack={prevStep} />;
      case 3:
        return <UsernameStep onNext={handleNext} onBack={prevStep} />;
      case 4:
        return <LocationStep onNext={handleNext} onBack={prevStep} />;
      case 5:
        return <SuggestionStep onNext={handleNext} onBack={prevStep} />;
      case 6:
        return <AuthStep onConclude={handleConclude} onBack={prevStep} />;
      default:
        return <InterestStep onNext={handleNext} />;
    }
  };

  const showProgressDots = step <= 6; // Mostrar as bolinhas até ao fim

  return (
    <>
      {renderStep()}
      {showProgressDots && (
        <div className="flex justify-center space-x-2 mt-8">
            {[1, 2, 3, 4, 5, 6].map((s) => (
            <div
                key={s}
                className={`w-2 h-2 rounded-full transition-colors duration-300 ${step === s ? 'bg-pink-500' : 'bg-gray-300'}`}
            ></div>
            ))}
        </div>
      )}
    </>
  );
};

export default RegistrationFlow;

